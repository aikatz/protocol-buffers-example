// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csv.proto

#ifndef PROTOBUF_csv_2eproto__INCLUDED
#define PROTOBUF_csv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace csv {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_csv_2eproto();
void protobuf_AssignDesc_csv_2eproto();
void protobuf_ShutdownFile_csv_2eproto();

class CSVFile;
class CSVHeader;
class CSVRow;

// ===================================================================

class CSVFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csv.CSVFile) */ {
 public:
  CSVFile();
  virtual ~CSVFile();

  CSVFile(const CSVFile& from);

  inline CSVFile& operator=(const CSVFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSVFile& default_instance();

  void Swap(CSVFile* other);

  // implements Message ----------------------------------------------

  inline CSVFile* New() const { return New(NULL); }

  CSVFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSVFile& from);
  void MergeFrom(const CSVFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSVFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .csv.CSVHeader header = 1;
  int header_size() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::csv::CSVHeader& header(int index) const;
  ::csv::CSVHeader* mutable_header(int index);
  ::csv::CSVHeader* add_header();
  ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >*
      mutable_header();
  const ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >&
      header() const;

  // repeated .csv.CSVRow row = 2;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 2;
  const ::csv::CSVRow& row(int index) const;
  ::csv::CSVRow* mutable_row(int index);
  ::csv::CSVRow* add_row();
  ::google::protobuf::RepeatedPtrField< ::csv::CSVRow >*
      mutable_row();
  const ::google::protobuf::RepeatedPtrField< ::csv::CSVRow >&
      row() const;

  // @@protoc_insertion_point(class_scope:csv.CSVFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader > header_;
  ::google::protobuf::RepeatedPtrField< ::csv::CSVRow > row_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_csv_2eproto();
  friend void protobuf_AssignDesc_csv_2eproto();
  friend void protobuf_ShutdownFile_csv_2eproto();

  void InitAsDefaultInstance();
  static CSVFile* default_instance_;
};
// -------------------------------------------------------------------

class CSVHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csv.CSVHeader) */ {
 public:
  CSVHeader();
  virtual ~CSVHeader();

  CSVHeader(const CSVHeader& from);

  inline CSVHeader& operator=(const CSVHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSVHeader& default_instance();

  void Swap(CSVHeader* other);

  // implements Message ----------------------------------------------

  inline CSVHeader* New() const { return New(NULL); }

  CSVHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSVHeader& from);
  void MergeFrom(const CSVHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSVHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string column_name = 1;
  int column_name_size() const;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name(int index) const;
  ::std::string* mutable_column_name(int index);
  void set_column_name(int index, const ::std::string& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  ::std::string* add_column_name();
  void add_column_name(const ::std::string& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_name();

  // @@protoc_insertion_point(class_scope:csv.CSVHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_csv_2eproto();
  friend void protobuf_AssignDesc_csv_2eproto();
  friend void protobuf_ShutdownFile_csv_2eproto();

  void InitAsDefaultInstance();
  static CSVHeader* default_instance_;
};
// -------------------------------------------------------------------

class CSVRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csv.CSVRow) */ {
 public:
  CSVRow();
  virtual ~CSVRow();

  CSVRow(const CSVRow& from);

  inline CSVRow& operator=(const CSVRow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSVRow& default_instance();

  void Swap(CSVRow* other);

  // implements Message ----------------------------------------------

  inline CSVRow* New() const { return New(NULL); }

  CSVRow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSVRow& from);
  void MergeFrom(const CSVRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSVRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 column_value = 1;
  int column_value_size() const;
  void clear_column_value();
  static const int kColumnValueFieldNumber = 1;
  ::google::protobuf::int64 column_value(int index) const;
  void set_column_value(int index, ::google::protobuf::int64 value);
  void add_column_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      column_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_column_value();

  // @@protoc_insertion_point(class_scope:csv.CSVRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > column_value_;
  mutable int _column_value_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_csv_2eproto();
  friend void protobuf_AssignDesc_csv_2eproto();
  friend void protobuf_ShutdownFile_csv_2eproto();

  void InitAsDefaultInstance();
  static CSVRow* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVFile

// repeated .csv.CSVHeader header = 1;
inline int CSVFile::header_size() const {
  return header_.size();
}
inline void CSVFile::clear_header() {
  header_.Clear();
}
inline const ::csv::CSVHeader& CSVFile::header(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVFile.header)
  return header_.Get(index);
}
inline ::csv::CSVHeader* CSVFile::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVFile.header)
  return header_.Mutable(index);
}
inline ::csv::CSVHeader* CSVFile::add_header() {
  // @@protoc_insertion_point(field_add:csv.CSVFile.header)
  return header_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >*
CSVFile::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVFile.header)
  return &header_;
}
inline const ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >&
CSVFile::header() const {
  // @@protoc_insertion_point(field_list:csv.CSVFile.header)
  return header_;
}

// repeated .csv.CSVRow row = 2;
inline int CSVFile::row_size() const {
  return row_.size();
}
inline void CSVFile::clear_row() {
  row_.Clear();
}
inline const ::csv::CSVRow& CSVFile::row(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVFile.row)
  return row_.Get(index);
}
inline ::csv::CSVRow* CSVFile::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVFile.row)
  return row_.Mutable(index);
}
inline ::csv::CSVRow* CSVFile::add_row() {
  // @@protoc_insertion_point(field_add:csv.CSVFile.row)
  return row_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::csv::CSVRow >*
CSVFile::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVFile.row)
  return &row_;
}
inline const ::google::protobuf::RepeatedPtrField< ::csv::CSVRow >&
CSVFile::row() const {
  // @@protoc_insertion_point(field_list:csv.CSVFile.row)
  return row_;
}

// -------------------------------------------------------------------

// CSVHeader

// repeated string column_name = 1;
inline int CSVHeader::column_name_size() const {
  return column_name_.size();
}
inline void CSVHeader::clear_column_name() {
  column_name_.Clear();
}
inline const ::std::string& CSVHeader::column_name(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVHeader.column_name)
  return column_name_.Get(index);
}
inline ::std::string* CSVHeader::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVHeader.column_name)
  return column_name_.Mutable(index);
}
inline void CSVHeader::set_column_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:csv.CSVHeader.column_name)
  column_name_.Mutable(index)->assign(value);
}
inline void CSVHeader::set_column_name(int index, const char* value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csv.CSVHeader.column_name)
}
inline void CSVHeader::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csv.CSVHeader.column_name)
}
inline ::std::string* CSVHeader::add_column_name() {
  // @@protoc_insertion_point(field_add_mutable:csv.CSVHeader.column_name)
  return column_name_.Add();
}
inline void CSVHeader::add_column_name(const ::std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csv.CSVHeader.column_name)
}
inline void CSVHeader::add_column_name(const char* value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csv.CSVHeader.column_name)
}
inline void CSVHeader::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csv.CSVHeader.column_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CSVHeader::column_name() const {
  // @@protoc_insertion_point(field_list:csv.CSVHeader.column_name)
  return column_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CSVHeader::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVHeader.column_name)
  return &column_name_;
}

// -------------------------------------------------------------------

// CSVRow

// repeated int64 column_value = 1;
inline int CSVRow::column_value_size() const {
  return column_value_.size();
}
inline void CSVRow::clear_column_value() {
  column_value_.Clear();
}
inline ::google::protobuf::int64 CSVRow::column_value(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVRow.column_value)
  return column_value_.Get(index);
}
inline void CSVRow::set_column_value(int index, ::google::protobuf::int64 value) {
  column_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:csv.CSVRow.column_value)
}
inline void CSVRow::add_column_value(::google::protobuf::int64 value) {
  column_value_.Add(value);
  // @@protoc_insertion_point(field_add:csv.CSVRow.column_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CSVRow::column_value() const {
  // @@protoc_insertion_point(field_list:csv.CSVRow.column_value)
  return column_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CSVRow::mutable_column_value() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVRow.column_value)
  return &column_value_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace csv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_csv_2eproto__INCLUDED
