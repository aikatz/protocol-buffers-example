// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csv {

namespace {

const ::google::protobuf::Descriptor* CSVFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVRow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_csv_2eproto() {
  protobuf_AddDesc_csv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csv.proto");
  GOOGLE_CHECK(file != NULL);
  CSVFile_descriptor_ = file->message_type(0);
  static const int CSVFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVFile, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVFile, row_),
  };
  CSVFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSVFile_descriptor_,
      CSVFile::default_instance_,
      CSVFile_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSVFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVFile, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVFile, _is_default_instance_));
  CSVHeader_descriptor_ = file->message_type(1);
  static const int CSVHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVHeader, column_name_),
  };
  CSVHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSVHeader_descriptor_,
      CSVHeader::default_instance_,
      CSVHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSVHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVHeader, _is_default_instance_));
  CSVRow_descriptor_ = file->message_type(2);
  static const int CSVRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVRow, column_value_),
  };
  CSVRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSVRow_descriptor_,
      CSVRow::default_instance_,
      CSVRow_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSVRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVRow, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVRow, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSVFile_descriptor_, &CSVFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSVHeader_descriptor_, &CSVHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSVRow_descriptor_, &CSVRow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csv_2eproto() {
  delete CSVFile::default_instance_;
  delete CSVFile_reflection_;
  delete CSVHeader::default_instance_;
  delete CSVHeader_reflection_;
  delete CSVRow::default_instance_;
  delete CSVRow_reflection_;
}

void protobuf_AddDesc_csv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_csv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcsv.proto\022\003csv\"C\n\007CSVFile\022\036\n\006header\030\001 "
    "\003(\0132\016.csv.CSVHeader\022\030\n\003row\030\002 \003(\0132\013.csv.C"
    "SVRow\" \n\tCSVHeader\022\023\n\013column_name\030\001 \003(\t\""
    "\036\n\006CSVRow\022\024\n\014column_value\030\001 \003(\003b\006proto3", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csv.proto", &protobuf_RegisterTypes);
  CSVFile::default_instance_ = new CSVFile();
  CSVHeader::default_instance_ = new CSVHeader();
  CSVRow::default_instance_ = new CSVRow();
  CSVFile::default_instance_->InitAsDefaultInstance();
  CSVHeader::default_instance_->InitAsDefaultInstance();
  CSVRow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csv_2eproto {
  StaticDescriptorInitializer_csv_2eproto() {
    protobuf_AddDesc_csv_2eproto();
  }
} static_descriptor_initializer_csv_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVFile::kHeaderFieldNumber;
const int CSVFile::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVFile::CSVFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csv.CSVFile)
}

void CSVFile::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSVFile::CSVFile(const CSVFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csv.CSVFile)
}

void CSVFile::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CSVFile::~CSVFile() {
  // @@protoc_insertion_point(destructor:csv.CSVFile)
  SharedDtor();
}

void CSVFile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVFile_descriptor_;
}

const CSVFile& CSVFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csv_2eproto();
  return *default_instance_;
}

CSVFile* CSVFile::default_instance_ = NULL;

CSVFile* CSVFile::New(::google::protobuf::Arena* arena) const {
  CSVFile* n = new CSVFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVFile::Clear() {
// @@protoc_insertion_point(message_clear_start:csv.CSVFile)
  header_.Clear();
  row_.Clear();
}

bool CSVFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csv.CSVFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .csv.CSVHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_header;
        if (input->ExpectTag(18)) goto parse_loop_row;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .csv.CSVRow row = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_row;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csv.CSVFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csv.CSVFile)
  return false;
#undef DO_
}

void CSVFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csv.CSVFile)
  // repeated .csv.CSVHeader header = 1;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(i), output);
  }

  // repeated .csv.CSVRow row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:csv.CSVFile)
}

::google::protobuf::uint8* CSVFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csv.CSVFile)
  // repeated .csv.CSVHeader header = 1;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->header(i), false, target);
  }

  // repeated .csv.CSVRow row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:csv.CSVFile)
  return target;
}

int CSVFile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:csv.CSVFile)
  int total_size = 0;

  // repeated .csv.CSVHeader header = 1;
  total_size += 1 * this->header_size();
  for (int i = 0; i < this->header_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header(i));
  }

  // repeated .csv.CSVRow row = 2;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csv.CSVFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSVFile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csv.CSVFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csv.CSVFile)
    MergeFrom(*source);
  }
}

void CSVFile::MergeFrom(const CSVFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csv.CSVFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  header_.MergeFrom(from.header_);
  row_.MergeFrom(from.row_);
}

void CSVFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csv.CSVFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVFile::CopyFrom(const CSVFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csv.CSVFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVFile::IsInitialized() const {

  return true;
}

void CSVFile::Swap(CSVFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVFile::InternalSwap(CSVFile* other) {
  header_.UnsafeArenaSwap(&other->header_);
  row_.UnsafeArenaSwap(&other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVFile_descriptor_;
  metadata.reflection = CSVFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVFile

// repeated .csv.CSVHeader header = 1;
int CSVFile::header_size() const {
  return header_.size();
}
void CSVFile::clear_header() {
  header_.Clear();
}
const ::csv::CSVHeader& CSVFile::header(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVFile.header)
  return header_.Get(index);
}
::csv::CSVHeader* CSVFile::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVFile.header)
  return header_.Mutable(index);
}
::csv::CSVHeader* CSVFile::add_header() {
  // @@protoc_insertion_point(field_add:csv.CSVFile.header)
  return header_.Add();
}
::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >*
CSVFile::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVFile.header)
  return &header_;
}
const ::google::protobuf::RepeatedPtrField< ::csv::CSVHeader >&
CSVFile::header() const {
  // @@protoc_insertion_point(field_list:csv.CSVFile.header)
  return header_;
}

// repeated .csv.CSVRow row = 2;
int CSVFile::row_size() const {
  return row_.size();
}
void CSVFile::clear_row() {
  row_.Clear();
}
const ::csv::CSVRow& CSVFile::row(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVFile.row)
  return row_.Get(index);
}
::csv::CSVRow* CSVFile::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVFile.row)
  return row_.Mutable(index);
}
::csv::CSVRow* CSVFile::add_row() {
  // @@protoc_insertion_point(field_add:csv.CSVFile.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::csv::CSVRow >*
CSVFile::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVFile.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::csv::CSVRow >&
CSVFile::row() const {
  // @@protoc_insertion_point(field_list:csv.CSVFile.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVHeader::kColumnNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVHeader::CSVHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csv.CSVHeader)
}

void CSVHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSVHeader::CSVHeader(const CSVHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csv.CSVHeader)
}

void CSVHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

CSVHeader::~CSVHeader() {
  // @@protoc_insertion_point(destructor:csv.CSVHeader)
  SharedDtor();
}

void CSVHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVHeader_descriptor_;
}

const CSVHeader& CSVHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csv_2eproto();
  return *default_instance_;
}

CSVHeader* CSVHeader::default_instance_ = NULL;

CSVHeader* CSVHeader::New(::google::protobuf::Arena* arena) const {
  CSVHeader* n = new CSVHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:csv.CSVHeader)
  column_name_.Clear();
}

bool CSVHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csv.CSVHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string column_name = 1;
      case 1: {
        if (tag == 10) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_name(this->column_name_size() - 1).data(),
            this->column_name(this->column_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "csv.CSVHeader.column_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_column_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csv.CSVHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csv.CSVHeader)
  return false;
#undef DO_
}

void CSVHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csv.CSVHeader)
  // repeated string column_name = 1;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "csv.CSVHeader.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->column_name(i), output);
  }

  // @@protoc_insertion_point(serialize_end:csv.CSVHeader)
}

::google::protobuf::uint8* CSVHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csv.CSVHeader)
  // repeated string column_name = 1;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "csv.CSVHeader.column_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->column_name(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:csv.CSVHeader)
  return target;
}

int CSVHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:csv.CSVHeader)
  int total_size = 0;

  // repeated string column_name = 1;
  total_size += 1 * this->column_name_size();
  for (int i = 0; i < this->column_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csv.CSVHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSVHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csv.CSVHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csv.CSVHeader)
    MergeFrom(*source);
  }
}

void CSVHeader::MergeFrom(const CSVHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csv.CSVHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_name_.MergeFrom(from.column_name_);
}

void CSVHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csv.CSVHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVHeader::CopyFrom(const CSVHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csv.CSVHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVHeader::IsInitialized() const {

  return true;
}

void CSVHeader::Swap(CSVHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVHeader::InternalSwap(CSVHeader* other) {
  column_name_.UnsafeArenaSwap(&other->column_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVHeader_descriptor_;
  metadata.reflection = CSVHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVHeader

// repeated string column_name = 1;
int CSVHeader::column_name_size() const {
  return column_name_.size();
}
void CSVHeader::clear_column_name() {
  column_name_.Clear();
}
 const ::std::string& CSVHeader::column_name(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVHeader.column_name)
  return column_name_.Get(index);
}
 ::std::string* CSVHeader::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:csv.CSVHeader.column_name)
  return column_name_.Mutable(index);
}
 void CSVHeader::set_column_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:csv.CSVHeader.column_name)
  column_name_.Mutable(index)->assign(value);
}
 void CSVHeader::set_column_name(int index, const char* value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csv.CSVHeader.column_name)
}
 void CSVHeader::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csv.CSVHeader.column_name)
}
 ::std::string* CSVHeader::add_column_name() {
  // @@protoc_insertion_point(field_add_mutable:csv.CSVHeader.column_name)
  return column_name_.Add();
}
 void CSVHeader::add_column_name(const ::std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csv.CSVHeader.column_name)
}
 void CSVHeader::add_column_name(const char* value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csv.CSVHeader.column_name)
}
 void CSVHeader::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csv.CSVHeader.column_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CSVHeader::column_name() const {
  // @@protoc_insertion_point(field_list:csv.CSVHeader.column_name)
  return column_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CSVHeader::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVHeader.column_name)
  return &column_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVRow::kColumnValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVRow::CSVRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csv.CSVRow)
}

void CSVRow::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSVRow::CSVRow(const CSVRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csv.CSVRow)
}

void CSVRow::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CSVRow::~CSVRow() {
  // @@protoc_insertion_point(destructor:csv.CSVRow)
  SharedDtor();
}

void CSVRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVRow_descriptor_;
}

const CSVRow& CSVRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csv_2eproto();
  return *default_instance_;
}

CSVRow* CSVRow::default_instance_ = NULL;

CSVRow* CSVRow::New(::google::protobuf::Arena* arena) const {
  CSVRow* n = new CSVRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVRow::Clear() {
// @@protoc_insertion_point(message_clear_start:csv.CSVRow)
  column_value_.Clear();
}

bool CSVRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csv.CSVRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 column_value = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_column_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_column_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csv.CSVRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csv.CSVRow)
  return false;
#undef DO_
}

void CSVRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csv.CSVRow)
  // repeated int64 column_value = 1;
  if (this->column_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_column_value_cached_byte_size_);
  }
  for (int i = 0; i < this->column_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->column_value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:csv.CSVRow)
}

::google::protobuf::uint8* CSVRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csv.CSVRow)
  // repeated int64 column_value = 1;
  if (this->column_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _column_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->column_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->column_value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:csv.CSVRow)
  return target;
}

int CSVRow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:csv.CSVRow)
  int total_size = 0;

  // repeated int64 column_value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->column_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->column_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _column_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csv.CSVRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSVRow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csv.CSVRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csv.CSVRow)
    MergeFrom(*source);
  }
}

void CSVRow::MergeFrom(const CSVRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csv.CSVRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_value_.MergeFrom(from.column_value_);
}

void CSVRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csv.CSVRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVRow::CopyFrom(const CSVRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csv.CSVRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVRow::IsInitialized() const {

  return true;
}

void CSVRow::Swap(CSVRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVRow::InternalSwap(CSVRow* other) {
  column_value_.UnsafeArenaSwap(&other->column_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVRow_descriptor_;
  metadata.reflection = CSVRow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVRow

// repeated int64 column_value = 1;
int CSVRow::column_value_size() const {
  return column_value_.size();
}
void CSVRow::clear_column_value() {
  column_value_.Clear();
}
 ::google::protobuf::int64 CSVRow::column_value(int index) const {
  // @@protoc_insertion_point(field_get:csv.CSVRow.column_value)
  return column_value_.Get(index);
}
 void CSVRow::set_column_value(int index, ::google::protobuf::int64 value) {
  column_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:csv.CSVRow.column_value)
}
 void CSVRow::add_column_value(::google::protobuf::int64 value) {
  column_value_.Add(value);
  // @@protoc_insertion_point(field_add:csv.CSVRow.column_value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CSVRow::column_value() const {
  // @@protoc_insertion_point(field_list:csv.CSVRow.column_value)
  return column_value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CSVRow::mutable_column_value() {
  // @@protoc_insertion_point(field_mutable_list:csv.CSVRow.column_value)
  return &column_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace csv

// @@protoc_insertion_point(global_scope)
